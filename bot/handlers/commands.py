from aiogram import Router, F, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from models.states import AddExpense
from utils.helpers import is_user_in_tusa
from bot import tusovki, user_sessions, bot
from bot.keyboards import send_main_menu
import uuid
from utils.logger import setup_logger
import logging

router = Router()
logger = setup_logger()

def message_log(text, user_id):
    return f'''
    Message sent to:
        {user_id}
    Message: 
        {text}
    '''

@router.message(CommandStart(deep_link=True))
async def start_with_deeplink(message: Message, command: CommandStart):
    try:
        payload = command.args
        if not payload or not payload.startswith("join_"):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
            return

        tusa_id = payload.split("_")[1]
        if tusa_id not in tusovki:
            await message.answer("‚ùå –¢—É—Å–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name or "User"

        tusovki[tusa_id]['participants'][user_id] = username
        user_sessions[user_id] = tusa_id

        text_message = f"‚úÖ {username}, —Ç—ã –≤ —Ç—É—Å–æ–≤–∫–µ <code>{tusa_id}</code>!"

        await message.answer(text_message)
        await send_main_menu(message.chat.id, tusa_id)

        logger.info(message_log(text_message, user_id))

        for uid in tusovki[tusa_id]['participants']:
            if uid != user_id:
                try:
                    await bot.send_message(uid, f"üë§ {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {uid}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ deep link: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.")

@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã.\n"
        "–°–æ–∑–¥–∞–π —Ç—É—Å–æ–≤–∫—É /create_tusa –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –¥—Ä—É–≥–∞."
    )

@router.message(Command("create_tusa"))
async def create_tusa(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name or "User"
        tusa_id = str(uuid.uuid4())[:8]

        tusovki[tusa_id] = {
            'participants': {user_id: username},
            'expenses': []
        }
        user_sessions[user_id] = tusa_id

        link = f"https://t.me/{(await bot.me()).username}?start=join_{tusa_id}"
        await message.answer(
            f"üéâ –¢—É—Å–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: <code>{tusa_id}</code>\n"
            f"–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π: {link}"
        )
        await send_main_menu(message.chat.id, tusa_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Å–æ–≤–∫–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—É—Å–æ–≤–∫—É.")

@router.message(Command("debug"))
async def debug(message: Message):
    debug_info = (
        f"–¢—É—Å–æ–≤–∫–∏: {list(tusovki.keys())}\n"
        f"–°–µ—Å—Å–∏–∏: {user_sessions}\n"
        f"–í–∞—à ID: {message.from_user.id}"
    )
    await message.answer(f"<code>{debug_info}</code>")

def register_handlers(dp: Dispatcher):
    dp.include_router(router)