from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from models.states import AddExpense
from utils.helpers import is_user_in_tusa
from bot import tusovki, user_sessions
from keyboards import get_main_menu_button, show_expense_menu
from datetime import datetime

router = Router()

@router.callback_query(F.data == "add_expense")
async def add_expense_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_user_in_tusa(user_id):
        await callback.answer("‚ùå –¢—ã –Ω–µ –≤ —Ç—É—Å–æ–≤–∫–µ!", show_alert=True)
        return

    tusa_id = user_sessions[user_id]
    participants = tusovki[tusa_id]['participants']

    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"payer:{uid}")]
        for uid, name in participants.items()
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("–ö—Ç–æ –ø–ª–∞—Ç–∏–ª?", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("payer:"))
async def select_payer(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_user_in_tusa(user_id):
        await callback.answer("‚ùå –¢—ã –Ω–µ –≤ —Ç—É—Å–æ–≤–∫–µ!", show_alert=True)
        return

    payer_id = int(callback.data.split(":")[1])
    tusa_id = user_sessions[user_id]

    if payer_id not in tusovki[tusa_id]['participants']:
        await callback.answer("‚ùå –≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –≤ —Ç—É—Å–æ–≤–∫–µ!", show_alert=True)
        return

    payer_name = tusovki[tusa_id]['participants'][payer_id]

    await state.update_data(payer_id=payer_id, payer_name=payer_name)
    await state.set_state(AddExpense.waiting_for_amount)

    await callback.message.edit_text(
        f"–ü–ª–∞—Ç–µ–ª—å—â–∏–∫: {payer_name}\n\n"
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:"
    )
    await callback.answer()

@router.message(AddExpense.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
        return

    await state.update_data(amount=amount)
    await state.set_state(AddExpense.waiting_for_description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£–∂–∏–Ω –≤ –∫–∞—Ñ–µ'):")

@router.message(AddExpense.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    description = message.text.strip()
    if not description:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await state.update_data(description=description)
    await state.set_state(AddExpense.waiting_for_targets)

    user_id = message.from_user.id
    tusa_id = user_sessions[user_id]
    participants = tusovki[tusa_id]['participants']

    buttons = []
    row = []
    for uid, name in participants.items():
        row.append(InlineKeyboardButton(text=name, callback_data=f"target:{uid}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    buttons.append([
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="targets_done"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    ])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–ª–∏—Ç—Å—è —Ä–∞—Å—Ö–æ–¥:", reply_markup=kb)

@router.callback_query(F.data.startswith("target:"), AddExpense.waiting_for_targets)
async def select_target(callback: CallbackQuery, state: FSMContext):
    target_id = int(callback.data.split(":")[1])
    data = await state.get_data()

    if "targets" not in data:
        data["targets"] = set()

    if target_id in data["targets"]:
        data["targets"].remove(target_id)
    else:
        data["targets"].add(target_id)

    await state.update_data(targets=data["targets"])

    tusa_id = user_sessions[callback.from_user.id]
    selected_names = [
        tusovki[tusa_id]['participants'][uid]
        for uid in data["targets"]
    ]

    text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + ("\n".join(selected_names) if selected_names else "‚ùå –ù–∏–∫–æ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
    await callback.message.edit_text(
        text + "\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=callback.message.reply_markup
    )
    await callback.answer()

@router.callback_query(F.data == "targets_done", AddExpense.waiting_for_targets)
async def finish_targets(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if not data.get("targets"):
        await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞!", show_alert=True)
        return

    tusa_id = user_sessions[callback.from_user.id]
    payer_name = data["payer_name"]
    amount = data["amount"]
    description = data.get("description", "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

    tusovki[tusa_id]['expenses'].append({
        "payer_id": data["payer_id"],
        "amount": amount,
        "description": description,
        "targets": set(data["targets"]),
        "datetime": datetime.now().isoformat()
    })

    target_names = [
        tusovki[tusa_id]['participants'][uid]
        for uid in data["targets"]
    ]

    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üí∏ {payer_name} –ø–æ—Ç—Ä–∞—Ç–∏–ª {amount:.2f} ‚ÇΩ\n"
        f"üìù {description}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(target_names)}"
    )

    await state.clear()
    await show_expense_menu(callback.message.chat.id)
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.include_router(router)